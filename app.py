import datetime
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from urllib.request import urlretrieve

url = "https://data.drees.solidarites-sante.gouv.fr/api/records/1.0/download/?dataset=covid-19-resultats-par-age-issus-des-appariements-entre-si-vic-si-dep-et-vac-si"
url2 = "https://data.drees.solidarites-sante.gouv.fr/explore/dataset/covid-19-resultats-par-age-issus-des-appariements-entre-si-vic-si-dep-et-vac-si/information/"

today = str(datetime.date.today())
today = f"{today[-2:]}/{today[5:7]}/{today[:4]}"

query_params = st.experimental_get_query_params()
lang2 = "en" if "lang" in query_params and "en" in query_params["lang"] else "fr"
legend_title = {"fr": "Statut vaccinal", "en": "Vaccine status"}
xaxis_title = {"fr": "√Çge", "en": "Age"}
yaxis_title = {"fr": "Cas par million de personnes", "en": "Cases per million people"}

lang_selection = st.selectbox("", ["üá´üá∑", "üá¨üáß"], index=0 if lang2 == "fr" else 1)
lang = "fr" if lang_selection == "üá´üá∑" else "en"


def transform_status(s, lang):
    if lang == "fr":
        if "Non-vaccin√©s" in s:
            return "[0]. Non vaccin√©s"
        if "r√©cente" in s:
            return "[1]. Premi√®re dose (‚â§ 14 jours)"
        if "efficace" in s:
            return "[2]. Premi√®re dose (> 14 jours)"
        if "Complet" in s and "sans rappel" in s:
            return "[3]. Sch√©ma vaccinal complet sans rappel"
        if "Complet" in s and "avec" in s:
            return "[4]. Sch√©ma vaccinal complet avec rappel"
    else:
        if "Non-vaccin√©s" in s:
            return "[0]. Not vaccinated"
        if "r√©cente" in s:
            return "[1]. First dose (‚â§ 14 days)"
        if "efficace" in s:
            return "[2]. First dose (> 14 jours)"
        if "Complet" in s and "sans rappel" in s:
            return "[3]. Fully vaccinated (without booster)"
        if "Complet" in s and "avec" in s:
            return "[4]. Fully vaccinated (with booster)"


def transform_age(s, lang):
    if lang == "fr":
        d = {
            "[20,39]": "20-39 ans",
            "[40,59]": "40-59 ans",
            "[60,79]": "60-79 ans",
            "[80;+]": "80 ans et plus",
        }
    else:
        d = {
            "[20,39]": "20-39 years old",
            "[40,59]": "40-59 years old",
            "[60,79]": "60-79 years old",
            "[80;+]": "80+ years old",
        }
    return d[s]


@st.experimental_memo(show_spinner=False)
def get_data(today):
    urlretrieve(url, filename="data.csv")
    df = pd.read_csv("data.csv", sep=";", on_bad_lines="skip")

    # Remove the 0-19 age range
    df = df[df["age"] != "[0,19]"]

    # Keep only the last 15 days available
    dates_kept = sorted(list(set(df["date"])))[-15:]
    df = df[df["date"].isin(dates_kept)]

    return df, dates_kept


df_initial, dates_kept = get_data(today)
earliest, latest = dates_kept[0], dates_kept[-1]
earliest = f"{earliest[-2:]}/{earliest[5:7]}"
latest = f"{latest[-2:]}/{latest[5:7]}"


@st.cache(show_spinner=False)
def preprocess_data(today, df_initial, lang):
    # Relabel the vaccination status and the age columns
    df = df_initial.copy()
    df["vac_statut"] = df["vac_statut"].map(lambda s: transform_status(s, lang))
    df["age"] = df["age"].map(lambda s: transform_age(s, lang))

    # Aggregate the data across all dates
    agg_dict = {
        "nb_pcr_sympt0": "sum",
        "nb_pcr0": "sum",
        "hc_pcr": "sum",
        "sc_pcr": "sum",
        "dc_pcr": "sum",
        "effectif": "mean",
    }
    df = (
        df.groupby(by=["age", "vac_statut", "date"])
        .sum()
        .groupby(by=["age", "vac_statut"])
        .agg(agg_dict)
    )
    df = df.reset_index(level=["age", "vac_statut"])

    # Compute the relative numbers of hospital admissions, ICU admissions and deaths
    df["sympt_pcr_per_1M"] = df.apply(
        lambda x: 1e6 * x.nb_pcr_sympt0 / x.effectif, axis=1
    )
    df["pcr_per_1M"] = df.apply(lambda x: 1e6 * x.nb_pcr0 / x.effectif, axis=1)
    df["hc_pcr_per_1M"] = df.apply(lambda x: 1e6 * x.hc_pcr / x.effectif, axis=1)
    df["sc_pcr_per_1M"] = df.apply(lambda x: 1e6 * x.sc_pcr / x.effectif, axis=1)
    df["dc_pcr_per_1M"] = df.apply(lambda x: 1e6 * x.dc_pcr / x.effectif, axis=1)

    return df


df = preprocess_data(today, df_initial, lang)

sidebar_title = {
    "fr": "COVID-19 : cas avec test PCR positif en fonction de l'√¢ge et du statut vaccinal en France",
    "en": "COVID-19: cases with positive PCR test by age and vaccine status in France",
}

sidebar_text = {
    "fr": f"""
Les graphiques de cette page montrent les nombres, par million de personnes, des :
- **tests PCR positifs**
- **tests PCR positifs** de personnes symptomatiques
- **hospitalisations**
- entr√©es en **soins critiques**
- **d√©c√®s**

... **au cours des 15 derniers jours** pour lesquels les donn√©es nationales sont disponibles ({earliest}-{latest}) et en fonction de l'**√¢ge** et du **statut vaccinal**.

Ces graphiques sont mis √† jour quotidiennement √† partir des donn√©es de la [DREES]({url2}).
""",
    "en": f"""
The charts on this page show the relative numbers (per million of people, by **age** and **vaccine status**) of:
- **positive PCR tests**
- **positives PCR tests** of symptomatic people
- **hospital admissions**
- **ICU admissions**
- **deaths**

... **during the last 15 days** for which national data are available ({earliest}-{latest}).

The charts are updated daily with [DREES]({url2}) data.
""",
}

titles = {
    0: {
        "fr": "$\\bf{Tests\ PCR\ positifs}$" + f" du {earliest} au {latest}",
        "en": "$\\bf{Positive\ PCR\ tests}$" + f" from {earliest} until {latest}",
    },
    1: {
        "fr": "$\\bf{Tests\ PCR\ positifs}$"
        + f" de personnes symptomatiques du {earliest} au {latest}",
        "en": "$\\bf{Positive\ PCR\ tests}$"
        + f" of symptomatic persons from {earliest} until {latest}",
    },
    2: {
        "fr": "$\\bf{Hospitalisations}$"
        + f" avec test PCR positif du {earliest} au {latest}",
        "en": "$\\bf{Hospital\ admissions}$"
        + f" with positive PCR test from {earliest} until {latest}",
    },
    3: {
        "fr": "$\\bf{Entr√©es\ en\ soins\ critiques}$"
        + f" avec test PCR positif du {earliest} au {latest}",
        "en": "$\\bf{ICU\ admissions}$"
        + f" with positive PCR test from {earliest} until {latest}",
    },
    4: {
        "fr": "$\\bf{D√©c√®s}$" + f" avec test PCR positif du {earliest} au {latest}",
        "en": "$\\bf{Deaths}$"
        + f" with positive PCR test from {earliest} until {latest}",
    },
}

table_title = {
    "fr": f"<b>Nombre de cas quotidiens avec test PCR positif</b><br>(p√©riode du {earliest} au {latest}, 20 ans ou plus)",
    "en": f"<b>Daily number of cases with positive PCR test</b><br>(period from {earliest} until {latest}, 20 years old or more)",
}

table_columns = {
    0: {"fr": "Situation observ√©e", "en": "Actual situation"},
    1: {
        "fr": "Situation hypoth√©tique sans vaccins",
        "en": "Hypothetical situation without vaccines",
    },
}

table_rows = {
    0: {"fr": "Infections", "en": "Infections"},
    1: {"fr": "Infections symptomatiques", "en": "Symptomatic infections"},
    2: {"fr": "Hospitalisations", "en": "Hospital admissions"},
    3: {"fr": "Entr√©es en soins critiques", "en": "ICU admissions"},
    4: {"fr": "D√©c√®s", "en": "Deaths"},
}

table_text = {
    0: {
        "fr": "√Ä partir des donn√©es pr√©c√©dentes et connaissant l'effectif de chaque classe d'√¢ge, il est possible de comparer la situation r√©ellement observ√©e et une situation hypoth√©tique o√π chaque personne aurait les m√™mes risques que les personnes non vaccin√©es de sa cat√©gorie d'√¢ge. **Le nombre de cas dans cette situation hypoth√©tique est toutefois sous-estim√© car il ne tient pas compte de l'effet de la couverture vaccinale sur la transmission**.",
        "en": "With these data and the size of the each age group, it's possible to compare the actual situation with a hypothetical situation in which everyone had the same risks as the risks as the non-vaccinated persons of her age group. **The number of cases in this hypothetical situation is however underestimated because it doesn't take into account the impact of vaccination on transmission.**",
    },
    1: {
        "fr": f"Date de mise √† jour : {today}, source : [DREES]({url2}), code : [GitHub](https://github.com/vivien000/vaccine-stats)",
        "en": f"Updated: {today}, source: [DREES]({url2}), code: [GitHub](https://github.com/vivien000/vaccine-stats)",
    },
}

# @st.cache(hash_funcs={matplotlib.figure.Figure: hash}, show_spinner=False)
def create_fig(key, title, lang, today):
    sns.set_context("paper")
    fig, ax = plt.subplots(figsize=(8, 4))
    sns.barplot(
        data=df[df["vac_statut"].map(lambda s: s[1] not in ["1", "2"])],
        x="age",
        y=key,
        hue="vac_statut",
        palette=sns.color_palette("rocket", 3),
        ax=ax,
    )
    sns.despine()
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles, [x[5:] for x in labels], title=legend_title[lang])
    ax.set(
        ylabel=yaxis_title[lang], xlabel=xaxis_title[lang], title=title,
    )
    return fig


st.sidebar.header(sidebar_title[lang])
st.sidebar.markdown(sidebar_text[lang])

st.markdown(
    """
    <style>
        div.stSelectbox{
            width: 80px !important;
        }
        .element-container {
            display: flex;
            justify-content: flex-end;
            flex-direction: row;
        }
    </style>""",
    unsafe_allow_html=True,
)

for key, title in [
    ("pcr_per_1M", titles[0][lang]),
    ("sympt_pcr_per_1M", titles[1][lang]),
    ("hc_pcr_per_1M", titles[2][lang]),
    ("sc_pcr_per_1M", titles[3][lang]),
    ("dc_pcr_per_1M", titles[4][lang]),
]:
    st.pyplot(create_fig(key, title, lang, today))


@st.cache(show_spinner=False)
def compute_daily_cases(today):
    sum_by_vac_status = df.groupby(by=["age"]).sum()[
        ["effectif", "nb_pcr0", "nb_pcr_sympt0", "hc_pcr", "sc_pcr", "dc_pcr"]
    ]
    age_range_sizes = sum_by_vac_status["effectif"]
    observed = sum_by_vac_status.sum()[
        ["nb_pcr0", "nb_pcr_sympt0", "hc_pcr", "sc_pcr", "dc_pcr"]
    ]
    non_vac_rates = (
        df[df["vac_statut"].map(lambda s: s[1]) == "0"]
        .groupby(by=["age"])
        .sum()[
            [
                "pcr_per_1M",
                "sympt_pcr_per_1M",
                "hc_pcr_per_1M",
                "sc_pcr_per_1M",
                "dc_pcr_per_1M",
            ]
        ]
    )
    counterfactual = {
        "pcr": np.dot(np.array(age_range_sizes), non_vac_rates["pcr_per_1M"]) / 1e6,
        "sympt_pcr": np.dot(
            np.array(age_range_sizes), non_vac_rates["sympt_pcr_per_1M"]
        )
        / 1e6,
        "hc_pcr": np.dot(np.array(age_range_sizes), non_vac_rates["hc_pcr_per_1M"])
        / 1e6,
        "sc_pcr": np.dot(np.array(age_range_sizes), non_vac_rates["sc_pcr_per_1M"])
        / 1e6,
        "dc_pcr": np.dot(np.array(age_range_sizes), non_vac_rates["dc_pcr_per_1M"])
        / 1e6,
    }
    return observed, counterfactual


observed, counterfactual = compute_daily_cases(today)

st.markdown(
    f"""
{table_text[0][lang]}

<style type="text/css">
table {{margin: auto}}
td {{width: 33.3%;text-align:center;vertical-align:middle}}
.bold {{font-weight: bold}}
</style>
<table>
<tbody>
  <tr style="border: none">
    <td style="border: none"></td>
    <td colspan="2">{table_title[lang]}</td>
  </tr>
  <tr style="border: none" class="bold">
    <td style="border: none"></td>
    <td>{table_columns[0][lang]}</td>
    <td>{table_columns[1][lang]}</td>
  </tr>
  <tr>
    <td class="bold">{table_rows[0][lang]}</td>
    <td>{int(observed['nb_pcr0']/15)}</td>
    <td>{int(counterfactual['pcr']/15)}</td>
  </tr>
  <tr>
    <td class="bold">{table_rows[1][lang]}</td>
    <td>{int(observed['nb_pcr_sympt0']/15)}</td>
    <td>{int(counterfactual['sympt_pcr']/15)}</td>
  </tr>
  <tr>
    <td class="bold">{table_rows[2][lang]}</td>
    <td>{int(observed['hc_pcr']/15)}</td>
    <td>{int(counterfactual['hc_pcr']/15)}</td>
  </tr>
  <tr>
    <td class="bold">{table_rows[3][lang]}</td>
    <td>{int(observed['sc_pcr']/15)}</td>
    <td>{int(counterfactual['sc_pcr']/15)}</td>
  </tr>
  <tr>
    <td class="bold">{table_rows[4][lang]}</td>
    <td>{int(observed['dc_pcr']/15)}</td>
    <td>{int(counterfactual['dc_pcr']/15)}</td>
  </tr>
</tbody>
</table>
<br>

{table_text[1][lang]}

""",
    unsafe_allow_html=True,
)
